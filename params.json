{"name":"Baked.js","tagline":"A static website generator in JS, powerered by prismic.io","body":"## Install\r\n\r\nTo use it, you first need to install its dependencies\r\n\r\n```sh\r\ngit clone https://github.com/prismicio/baked.js.git\r\ncd baked.js\r\nnpm install\r\n```\r\n\r\n## Use\r\n\r\nRun baked.js with the command:\r\n\r\n```sh\r\nnode src/server.js <src_dir> <dest_dir>\r\n```\r\n\r\nIt displays a lot of informations, explaining what it's doing, which file it's trying to render, and describing errors that could occur.\r\n\r\n**Tips**: you can use the `--no-async` argument to make the displayed informations more readable. It will run slower though.\r\n\r\nWhen it's finished, just copy the generated files into your favorite HTTP server (or you can open them directly in your browser if you like).\r\n\r\n## Page parameters\r\n\r\nSome pages (like articles of a blog) can be done by creating one file and specify parameter, like the ID of the article.\r\n\r\nThe problem (that classic static generator engine haven't) is that these parameters are generally not known before parsing other pages. For instance the main blog page lists some articles (displays a preview) and give links to them. That's how we know that there are articles of these specific IDs.\r\n\r\nThe reality is the opposite of what we could imagine: we need to know that a page is needed in order to be able to create it!\r\n\r\nFirst, add a `<meta>` tag per parameter in the page's header.\r\n\r\n```html\r\n<meta name=\"prismic-routing-param\" content=\"id\">\r\n```\r\n\r\nThen use theses parameters in your query, by using the syntax `$name` or `${name}.``\r\n\r\n```html\r\n<script type=\"text/prismic-query\" data-binding=\"product\">\r\n  [\r\n    [:d = any(document.id, [\"$id\"])]\r\n  ]\r\n</script>\r\n```\r\n\r\nTo create links to this page, use the helper `url_to`, and specify the file name (without the “.html” part) and the arguments.\r\n\r\n```html\r\n<a href=\"[%= url_to('product', {id: product.id}) %]\">\r\n    [%= product.getText('product.name') %]\r\n</a>\r\n```\r\n\r\n**Bonus**: if your only argument is “`id`”, you can give it directly, without wrap it in a “`{id: \"xxx\"}`” structure.\r\n\r\n```html\r\n<a href=\"[%= url_to('product', product.id) %]\">\r\n    [%= product.getText('product.name') %]\r\n</a>\r\n```\r\n\r\nYou can also use the helper without providing any argument.\r\n\r\n```html\r\n<a href=\"[%= url_to('index' %]\">index</a>\r\n```\r\n\r\n**Note**: remember: if nobody call a page (using the `url_to` helper) it won't be generated.\r\n\r\n### Custom URL\r\n\r\nIt is possible to customize the URL as well. To do so, just add a `<meta>` tag “`prismic-routing-pattern`” in your page's header.\r\n\r\n```html\r\n<meta name=\"prismic-routing-pattern\" content=\"product/$id\">\r\n```\r\n\r\n**Warning**: be sure to specify every routing params in the URL! If you don't, we can't guarantee that there won't be URL conflict.\r\n\r\n## Dev mode\r\n\r\nIt's possible to directly open the sources file in your browser. The rendering lib will run as seen in the last blog article (+ the `url_to` helper is working).\r\n\r\n## Internals\r\n\r\nbaked.js is built on top of [Node.js](nodejs.org) and use [dom.js](https://github.com/andreasgal/dom.js/) to emulate the DOM.\r\n\r\nIt intensively uses [Q](https://github.com/kriskowal/q) and [lodash](http://lodash.com), and let [Grunt](http://gruntjs.com/) and [browserify](browserify.org) handle the generation of the browser library.\r\n\r\n## Notes\r\n\r\n- page in dev mode don't have the global map of exiting pages, so:\r\n\t- the page a URL `http://host/foo/bar.html` could be\r\n\t\t- the file `foo/bar.html` (if the generated files are put at the root of `host`)\r\n\t\t- the file `bar.html` (if the generated files are put in the dir `foo` of `host`)\r\n\t- `url_to` have to be relative (how to link to a global file without knowning what is the origin point?)\r\n\t- the custom routes can't be honored, even simple rename (how can we know which route should be used without reading the called file?)\r\n- the server build a DOM structure (using JSDOM) in order to navigate inside it, so:\r\n\t- The tags `<% %>` can't be used, because JSDOM doesn't like them\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}